generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tool {
  id                                  Int        @id @default(autoincrement())
  name                                String
  description                         String?
  icon                                String?
  order                               Int?
  link                                String?
  category_id                         Int?
  bookmark                            Bookmark[]
  Category_Category_tool_idToTool     Category[] @relation("Category_tool_idToTool")
  Category_Tool_category_idToCategory Category?  @relation("Tool_category_idToCategory", fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([icon], map: "Tool_logo_idx")
  @@index([name])
}

model User {
  id                        Int        @id @default(autoincrement())
  email                     String
  password                  String
  firstname                 String?
  lastname                  String?
  username                  String
  active                    Boolean    @default(false)
  imgId                     Int?
  website                   String?
  bookmark                  Bookmark[]
  Image_Image_user_idToUser Image[]    @relation("Image_user_idToUser")
  image                     Image?     @relation(fields: [imgId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([firstname])
  @@index([lastname])
  @@index([website])
}

model Bookmark {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  link        String?
  userId      Int?
  toolId      Int?
  imgId       Int?
  image       Image?  @relation(fields: [imgId], references: [id], onDelete: Cascade)
  tool        Tool?   @relation(fields: [toolId], references: [id], onDelete: Cascade, map: "bookmark_toolId_fkey")
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "bookmark_userId_fkey")

  @@index([link])
  @@index([imgId])
  @@index([name])
}

model ToolsOnUsers {
  userId     Int
  toolId     Int
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)

  @@id([userId, toolId])
}

model Token {
  id              Int     @id @default(autoincrement())
  jwtRefreshToken String?
  expiration      String?
  emailToken      String
  userId          Int

  @@index([emailToken])
  @@index([jwtRefreshToken])
  @@index([expiration])
}

model Image {
  id                       Int        @id @default(autoincrement())
  fileName                 String     @unique
  filePath                 String
  mimeType                 String
  size                     BigInt
  type                     String?
  user_id                  Int?
  Bookmark                 Bookmark[]
  User_Image_user_idToUser User?      @relation("Image_user_idToUser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id")
  User                     User[]

  @@index([fileName])
  @@index([filePath])
  @@index([mimeType])
  @@index([size])
}

model Category {
  id                              Int       @id @default(autoincrement())
  name                            String
  description                     String
  tool_id                         Int?
  order                           Int?      @default(999)
  created_at                      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime? @db.Timestamptz(6)
  Tool_Category_tool_idToTool     Tool?     @relation("Category_tool_idToTool", fields: [tool_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Tool_Tool_category_idToCategory Tool[]    @relation("Tool_category_idToCategory")
}
